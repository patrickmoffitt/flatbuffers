// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var OV5642_Settings = OV5642_Settings || {};

/**
 * @constructor
 */
OV5642_Settings.Settings = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {OV5642_Settings.Settings}
 */
OV5642_Settings.Settings.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {OV5642_Settings.Settings=} obj
 * @returns {OV5642_Settings.Settings}
 */
OV5642_Settings.Settings.getRootAsSettings = function(bb, obj) {
  return (obj || new OV5642_Settings.Settings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {OV5642_Settings.Settings=} obj
 * @returns {OV5642_Settings.Settings}
 */
OV5642_Settings.Settings.getSizePrefixedRootAsSettings = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OV5642_Settings.Settings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.jpegSize = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.quality = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.frames = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.lightMode = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.colorSaturation = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.brightness = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.contrast = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.hue = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.effect = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.exposure = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.sharpness = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.mirror = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
OV5642_Settings.Settings.prototype.testPattern = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
OV5642_Settings.Settings.startSettings = function(builder) {
  builder.startObject(13);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} jpegSize
 */
OV5642_Settings.Settings.addJpegSize = function(builder, jpegSize) {
  builder.addFieldInt8(0, jpegSize, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} quality
 */
OV5642_Settings.Settings.addQuality = function(builder, quality) {
  builder.addFieldInt8(1, quality, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} frames
 */
OV5642_Settings.Settings.addFrames = function(builder, frames) {
  builder.addFieldInt8(2, frames, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} lightMode
 */
OV5642_Settings.Settings.addLightMode = function(builder, lightMode) {
  builder.addFieldInt8(3, lightMode, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} colorSaturation
 */
OV5642_Settings.Settings.addColorSaturation = function(builder, colorSaturation) {
  builder.addFieldInt8(4, colorSaturation, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} brightness
 */
OV5642_Settings.Settings.addBrightness = function(builder, brightness) {
  builder.addFieldInt8(5, brightness, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} contrast
 */
OV5642_Settings.Settings.addContrast = function(builder, contrast) {
  builder.addFieldInt8(6, contrast, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} hue
 */
OV5642_Settings.Settings.addHue = function(builder, hue) {
  builder.addFieldInt8(7, hue, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} effect
 */
OV5642_Settings.Settings.addEffect = function(builder, effect) {
  builder.addFieldInt8(8, effect, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} exposure
 */
OV5642_Settings.Settings.addExposure = function(builder, exposure) {
  builder.addFieldInt8(9, exposure, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sharpness
 */
OV5642_Settings.Settings.addSharpness = function(builder, sharpness) {
  builder.addFieldInt8(10, sharpness, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} mirror
 */
OV5642_Settings.Settings.addMirror = function(builder, mirror) {
  builder.addFieldInt8(11, mirror, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} testPattern
 */
OV5642_Settings.Settings.addTestPattern = function(builder, testPattern) {
  builder.addFieldInt8(12, testPattern, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
OV5642_Settings.Settings.endSettings = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
OV5642_Settings.Settings.finishSettingsBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
OV5642_Settings.Settings.finishSizePrefixedSettingsBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} jpegSize
 * @param {number} quality
 * @param {number} frames
 * @param {number} lightMode
 * @param {number} colorSaturation
 * @param {number} brightness
 * @param {number} contrast
 * @param {number} hue
 * @param {number} effect
 * @param {number} exposure
 * @param {number} sharpness
 * @param {number} mirror
 * @param {number} testPattern
 * @returns {flatbuffers.Offset}
 */
OV5642_Settings.Settings.createSettings = function(builder, jpegSize, quality, frames, lightMode, colorSaturation, brightness, contrast, hue, effect, exposure, sharpness, mirror, testPattern) {
  OV5642_Settings.Settings.startSettings(builder);
  OV5642_Settings.Settings.addJpegSize(builder, jpegSize);
  OV5642_Settings.Settings.addQuality(builder, quality);
  OV5642_Settings.Settings.addFrames(builder, frames);
  OV5642_Settings.Settings.addLightMode(builder, lightMode);
  OV5642_Settings.Settings.addColorSaturation(builder, colorSaturation);
  OV5642_Settings.Settings.addBrightness(builder, brightness);
  OV5642_Settings.Settings.addContrast(builder, contrast);
  OV5642_Settings.Settings.addHue(builder, hue);
  OV5642_Settings.Settings.addEffect(builder, effect);
  OV5642_Settings.Settings.addExposure(builder, exposure);
  OV5642_Settings.Settings.addSharpness(builder, sharpness);
  OV5642_Settings.Settings.addMirror(builder, mirror);
  OV5642_Settings.Settings.addTestPattern(builder, testPattern);
  return OV5642_Settings.Settings.endSettings(builder);
}

// Exports for Node.js and RequireJS
this.OV5642_Settings = OV5642_Settings;
